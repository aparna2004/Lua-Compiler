// ...existing code...
// Add to tokens section
%token IF ELSE ELSEIF WHILE THEN END DO

%type <node> stmt expr block program bool_expr logic_expr for_stmt elseif_list

// ...existing code...

stmt:
    IDENT ASSIGN expr { $$ = new AssignNode($1, $3); }
    | IF expr THEN block elseif_list END { $$ = new IfNode($2, $4, $5); }
    | IF expr THEN block elseif_list ELSE block END { $$ = new IfNode($2, $4, $5, $7); }
    | WHILE expr DO block END { $$ = new WhileNode($2, $4); }
    | for_stmt { $$ = $1; }
    ;

elseif_list:
    /* empty */ { $$ = nullptr; }
    | elseif_list ELSEIF expr THEN block { $$ = new ElseIfNode($3, $5, $1); }
    ;

class ElseIfNode : public Node {
public:
    Node* condition;
    Node* body;
    Node* next;  // Next elseif in chain

    ElseIfNode(Node* cond, Node* body, Node* next = nullptr)
        : condition(cond), body(body), next(next) {}

    void print() const override {
        std::cout << "elseif ";
        condition->print();
        std::cout << " then ";
        body->print();
        if (next) {
            next->print();
        }
    }

    std::pair<std::string, std::vector<std::string>> generateIC() override {
        auto [condTemp, condCode] = condition->generateIC();
        auto [_, bodyCode] = body->generateIC();
        
        std::string labelNext = newLabel();
        std::string labelEnd = newLabel();
        
        std::vector<std::string> code = condCode;
        code.push_back("if " + condTemp + " = 0 goto " + labelNext);
        code.insert(code.end(), bodyCode.begin(), bodyCode.end());
        code.push_back("goto " + labelEnd);
        code.push_back(labelNext + ":");
        
        if (next) {
            auto [__, nextCode] = next->generateIC();
            code.insert(code.end(), nextCode.begin(), nextCode.end());
        }
        
        code.push_back(labelEnd + ":");
        return {"", code};
    }
};

class IfNode : public Node {
public:
    Node* condition;
    Node* thenBlock;
    Node* elseifList;
    Node* elseBlock;

    IfNode(Node* cond, Node* then, Node* elseif = nullptr, Node* else_block = nullptr)
        : condition(cond), thenBlock(then), elseifList(elseif), elseBlock(else_block) {}

    void print() const override {
        std::cout << "if ";
        condition->print();
        std::cout << " then ";
        thenBlock->print();
        if (elseifList) {
            elseifList->print();
        }
        if (elseBlock) {
            std::cout << " else ";
            elseBlock->print();
        }
        std::cout << " end";
    }

    std::pair<std::string, std::vector<std::string>> generateIC() override {
        auto [condTemp, condCode] = condition->generateIC();
        auto [_, thenCode] = thenBlock->generateIC();
        
        std::string labelElseif = newLabel();
        std::string labelEnd = newLabel();
        
        std::vector<std::string> code = condCode;
        code.push_back("if " + condTemp + " = 0 goto " + labelElseif);
        code.insert(code.end(), thenCode.begin(), thenCode.end());
        code.push_back("goto " + labelEnd);
        
        code.push_back(labelElseif + ":");
        if (elseifList) {
            auto [__, elseifCode] = elseifList->generateIC();
            code.insert(code.end(), elseifCode.begin(), elseifCode.end());
        }
        
        if (elseBlock) {
            auto [___, elseCode] = elseBlock->generateIC();
            code.insert(code.end(), elseCode.begin(), elseCode.end());
        }
        
        code.push_back(labelEnd + ":");
        return {"", code};
    }
};

/lexer.l
// Add to lexer rules
"elseif"                   { return ELSEIF; }